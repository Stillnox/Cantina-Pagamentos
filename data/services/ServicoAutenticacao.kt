// ServicoAutenticacao.kt
package com.cantina.pagamentos.data.services

import com.cantina.pagamentos.data.models.EstadoAutenticacao
import com.cantina.pagamentos.data.models.FuncionarioFirebase
import com.cantina.pagamentos.data.models.ResultadoFirebase
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.auth.FirebaseUser
import com.google.firebase.firestore.FirebaseFirestore
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.tasks.await
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch

/**
 * Servi√ßo respons√°vel pela autentica√ß√£o e gerenciamento de usu√°rios
 *
 * Este servi√ßo funciona como um "porteiro" do aplicativo:
 * - Verifica quem est√° tentando entrar (login)
 * - Mant√©m registro de quem est√° dentro (sess√£o)
 * - Controla o que cada pessoa pode fazer (permiss√µes)
 */
class ServicoAutenticacao {

    // Inst√¢ncias do Firebase
    private val auth = FirebaseAuth.getInstance()
    private val firestore = FirebaseFirestore.getInstance()

    // Estado atual da autentica√ß√£o (observ√°vel)
    private val _estadoAutenticacao = MutableStateFlow<EstadoAutenticacao>(EstadoAutenticacao.Carregando)
    val estadoAutenticacao: StateFlow<EstadoAutenticacao> = _estadoAutenticacao

    // Funcion√°rio atualmente logado
    private var funcionarioAtual: FuncionarioFirebase? = null

    init {
        // Quando o servi√ßo inicia, verifica se j√° tem algu√©m logado
        verificarUsuarioLogado()
    }

    /**
     * Verifica se j√° existe um usu√°rio logado
     * Isso √© √∫til quando o app √© aberto novamente
     */
    private fun verificarUsuarioLogado() {
        val usuarioFirebase = auth.currentUser

        if (usuarioFirebase != null) {
            // Se tem algu√©m logado, busca os dados completos
            CoroutineScope(Dispatchers.IO).launch {
                carregarDadosFuncionario(usuarioFirebase)
            }
        } else {
            // Se n√£o tem ningu√©m logado
            _estadoAutenticacao.value = EstadoAutenticacao.NaoAutenticado
        }
    }

    /**
     * Realiza o login do funcion√°rio
     *
     * @param email Email do funcion√°rio
     * @param senha Senha do funcion√°rio
     * @return ResultadoFirebase indicando sucesso ou erro
     */
    suspend fun fazerLogin(email: String, senha: String): ResultadoFirebase<FuncionarioFirebase> {
        return try {
            println("üî• [ServicoAutenticacao] Iniciando login para: $email")
            
            // Verifica se o Firebase Auth est√° dispon√≠vel
            if (auth == null) {
                println("üî• [ServicoAutenticacao] ERRO: Firebase Auth n√£o inicializado")
                return ResultadoFirebase.Erro("Firebase n√£o inicializado")
            }
            
            // 1. Faz login no Firebase Auth
            val resultado = auth.signInWithEmailAndPassword(email, senha).await()
            val usuario = resultado.user

            println("üî• [ServicoAutenticacao] Login Firebase Auth: ${if (usuario != null) "SUCESSO" else "FALHOU"}")

            if (usuario != null) {
                println("üî• [ServicoAutenticacao] Usu√°rio ID: ${usuario.uid}")
                
                // 2. Se login funcionou, busca dados completos do funcion√°rio
                val funcionario = carregarDadosFuncionario(usuario)

                if (funcionario != null) {
                    println("üî• [ServicoAutenticacao] Funcion√°rio carregado: ${funcionario.nome}")
                    ResultadoFirebase.Sucesso(funcionario)
                } else {
                    println("üî• [ServicoAutenticacao] ERRO: Funcion√°rio n√£o encontrado no Firestore")
                    // Se n√£o encontrou dados do funcion√°rio, faz logout
                    auth.signOut()
                    ResultadoFirebase.Erro("Funcion√°rio n√£o encontrado no sistema")
                }
            } else {
                println("üî• [ServicoAutenticacao] ERRO: Usu√°rio null ap√≥s login")
                ResultadoFirebase.Erro("Erro ao fazer login")
            }

        } catch (e: Exception) {
            println("üî• [ServicoAutenticacao] EXCE√á√ÉO: ${e.message}")
            e.printStackTrace()
            
            // Traduz erros comuns para portugu√™s
            val mensagemErro = when {
                e.message?.contains("password") == true -> "Senha incorreta"
                e.message?.contains("no user") == true -> "Email n√£o cadastrado"
                e.message?.contains("network") == true -> "Erro de conex√£o com internet"
                e.message?.contains("GoogleApiAvailability") == true -> "Google Play Services n√£o dispon√≠vel"
                e.message?.contains("SecurityException") == true -> "Erro de configura√ß√£o do Firebase"
                else -> "Erro ao fazer login: ${e.message}"
            }
            ResultadoFirebase.Erro(mensagemErro)
        }
    }

    /**
     * Carrega os dados completos do funcion√°rio do Firestore
     */
    private suspend fun carregarDadosFuncionario(usuario: FirebaseUser): FuncionarioFirebase? {
        return try {
            // Busca no Firestore usando o ID do usu√°rio
            val documento = firestore.collection("funcionarios")
                .document(usuario.uid)
                .get()
                .await()

            if (documento.exists()) {
                val funcionario = documento.toObject(FuncionarioFirebase::class.java)

                if (funcionario != null && funcionario.ativo) {
                    // Salva o funcion√°rio atual e atualiza o estado
                    funcionarioAtual = funcionario
                    _estadoAutenticacao.value = EstadoAutenticacao.Autenticado(funcionario)
                    funcionario
                } else {
                    // Se o funcion√°rio est√° inativo
                    _estadoAutenticacao.value = EstadoAutenticacao.NaoAutenticado
                    null
                }
            } else {
                _estadoAutenticacao.value = EstadoAutenticacao.NaoAutenticado
                null
            }
        } catch (e: Exception) {
            _estadoAutenticacao.value = EstadoAutenticacao.NaoAutenticado
            null
        }
    }

    /**
     * Faz logout do funcion√°rio
     */
    fun fazerLogout() {
        auth.signOut()
        funcionarioAtual = null
        _estadoAutenticacao.value = EstadoAutenticacao.NaoAutenticado
    }

    /**
     * Verifica se o funcion√°rio atual √© administrador
     */
    fun isAdmin(): Boolean {
        return funcionarioAtual?.isadmin ?: false
    }

    /**
     * Retorna o funcion√°rio atualmente logado
     */
    fun getFuncionarioAtual(): FuncionarioFirebase? {
        return funcionarioAtual
    }

    /**
     * Cria uma nova conta de funcion√°rio (apenas admins podem fazer isso)
     *
     * @param email Email do novo funcion√°rio
     * @param senha Senha inicial
     * @param nome Nome completo
     * @param isAdmin Se √© administrador ou n√£o
     */
    suspend fun criarFuncionario(
        email: String,
        senha: String,
        nome: String,
        isNovoFuncionarioAdmin: Boolean
    ): ResultadoFirebase<String> {
        // Verifica se quem est√° criando √© admin
        if (!this.isAdmin()) {
            return ResultadoFirebase.Erro("Apenas administradores podem criar funcion√°rios")
        }

        return try {
            // 1. Cria a conta no Firebase Auth
            val resultado = auth.createUserWithEmailAndPassword(email, senha).await()
            val novoUsuario = resultado.user

            if (novoUsuario != null) {
                // 2. Cria o documento do funcion√°rio no Firestore
                val novoFuncionario = FuncionarioFirebase(
                    id = novoUsuario.uid,
                    nome = nome,
                    email = email,
                    isadmin = isNovoFuncionarioAdmin,
                    ativo = true
                )

                firestore.collection("funcionarios")
                    .document(novoUsuario.uid)
                    .set(novoFuncionario)
                    .await()

                ResultadoFirebase.Sucesso("Funcion√°rio criado com sucesso")
            } else {
                ResultadoFirebase.Erro("Erro ao criar funcion√°rio")
            }

        } catch (e: Exception) {
            val mensagemErro = when {
                e.message?.contains("email") == true -> "Email j√° cadastrado"
                e.message?.contains("password") == true -> "Senha deve ter pelo menos 6 caracteres"
                else -> "Erro ao criar funcion√°rio: ${e.message}"
            }
            ResultadoFirebase.Erro(mensagemErro)
        }
    }

    /**
     * Lista todos os funcion√°rios (apenas admins)
     */
    suspend fun listarFuncionarios(): ResultadoFirebase<List<FuncionarioFirebase>> {
        if (!isAdmin()) {
            return ResultadoFirebase.Erro("Apenas administradores podem ver funcion√°rios")
        }

        return try {
            val funcionarios = firestore.collection("funcionarios")
                .get()
                .await()
                .toObjects(FuncionarioFirebase::class.java)

            ResultadoFirebase.Sucesso(funcionarios)
        } catch (e: Exception) {
            ResultadoFirebase.Erro("Erro ao buscar funcion√°rios: ${e.message}")
        }
    }

    /**
     * Ativa ou desativa um funcion√°rio (apenas admins)
     */
    suspend fun alterarStatusFuncionario(funcionarioId: String, ativo: Boolean): ResultadoFirebase<String> {
        if (!isAdmin()) {
            return ResultadoFirebase.Erro("Apenas administradores podem alterar funcion√°rios")
        }

        return try {
            firestore.collection("funcionarios")
                .document(funcionarioId)
                .update("ativo", ativo)
                .await()

            val status = if (ativo) "ativado" else "desativado"
            ResultadoFirebase.Sucesso("Funcion√°rio $status com sucesso")
        } catch (e: Exception) {
            ResultadoFirebase.Erro("Erro ao alterar funcion√°rio: ${e.message}")
        }
    }
}